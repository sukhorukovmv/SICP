
//нахождение факториал прямая рекурсия 
(define (factorial n)
    (if (= n 1) n (* n (factorial (- n 1)))))

;;упражнение 1.3 Определите процедуру, которая принимает в качестве аргументов три числа и возвращает сумму квадратов больших из них. 

(define (sum-of-squares-of-top-two a b c)
    (define (max1)
    (cond ((and (>= a b) (>= a c)) a)
          ((and (>= b a) (>= b c)) b)
          (else c)))
    (define (max2)
    (cond ((= a (max1)) (if (> b c) b c))
          ((= b (max1)) (if (> a c) a c))
          ((= c (max1)) (if (> a b) a b))))
   (+ (square (max1)) (square (max2))))

(define (>= a b) 
    (or (> a b) (= a b)))

(define (square x) (* x x))

(define (!= a b)
    (or (> a b) (< a b)))

//Решение которое лучше 
(define (sum-of-squares a b)
  (+ (* a a) (* b b)))

(define (sum-of-squares-of-top-two a b c)
  (cond ((and (< a b) (< a c)) (sum-of-squares b c))
        ((and (< b a) (< b c)) (sum-of-squares a c))
        (else (sum-of-squares a b))))

;;упражнение 1.4 

	(define (a-plus-abs-b a b)
    		((if (> b 0) + -) a b)
;;квадратный корень числа 

(define (sqrt x)
    (define (good-enough? guess)
      (< (abs (- (square guess) x)) 0.001))
    (define (improve guess)
      (average guess (/ x guess)))
    (define (sqrt-iter guess)
      (if (good-enough? guess)
          guess
          (sqrt-iter (improve guess))))
    (sqrt-iter 1.0))

(define (average x y)
    (/ (+ x y) 2))

;;1.7
(define e 0.0001)

(define (good-enough?v2.0 guess x)
    (< (abs (- (abs (square guess)) (abs (square (improve guess x))))) e))

//функция акермана 
(define (A x y)
    (cond ((= y 0) 0)
          ((= x 0) (* 2 y))
          ((= y 1) 2)
          (else (A (- x 1) (A x (- y 1))))))


         
;;кубический корень 
(define (cube x) (* x x x))

(define (cube-sqrt x)
    (define (good-enough? guess)
      (< (abs (- (cube guess) x)) 0.001))
    (define (improve guess)
      (/ (+ (/ x (* guess guess)) (* 2 guess)) 3))
    (define (sqrt-iter guess)
      (if (good-enough? guess)
          guess
          (sqrt-iter (improve guess))))
    (sqrt-iter 1.1))

;;Pascal 
(define (Pascal a b)
    ( if (or (= a b) (= a 1) (= b 1))
         1
         (+ (Pascal (- a 1) b) (Pascal (- a 1) (- b 1)))))

;;Функция f задана таким образом: f(n) = n if n < 3, and f(n) = f(n - 1) + 2f(n - 2) + 3f(n - 3) if n >= 3.

(define (f n)
    (if (< n 3)
        n
        (+ (f (- n 1)) (* 2 (f (- n 2))) (* 3 (f (- n 3))))))

